{
  "name": "node-term-ui",
  "version": "0.0.5",
  "main": "TermUI.coffee",
  "dependencies": {
    "underscore": "",
    "underscore.string": ""
  },
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "author": {
    "name": "Josh Faul",
    "email": "josh.faul@gmail.com",
    "url": "jocafa.com"
  },
  "description": "UI Toolkit for node.js console apps",
  "homepage": "https://github.com/jocafa/node-term-ui",
  "repository": {
    "type": "git",
    "url": "git://github.com/jocafa/node-term-ui.git"
  },
  "readme": "TermUI\n======\n\nTermUI is a library for Node.js that makes it easier to create rich console\ninterfaces.\n\n## General Usage\n\n### Rendering\n\n  - `out(text)` - prints text to the screen from the current cursor position\n  - `clear()` - clears the screen\n  - `pos(x,y)` - positions the cursor\n  - `home()` - sends the cursor to the top left corner\n  - `end()` - sends the cursor to the bottom right corner\n  - `fg(color)` - sets the foreground color\n  - `bg(color)` - sets the background color\n  - `hifg(color)` - sets the foreground color for 256 color terminals\n  - `hibg(color)` - sets the background color for 256 color terminals\n  - `enableMouse()` - enables mouse event handling\n  - `disableMouse()` - disables mouse event handling\n  - `eraseLine()` - erases the entire line that the cursor is on\n  - `hideCursor()` - hides the cursor\n  - `showCursor()` - shows the cursor\n\nThe following will print \"Hello, world!\" at 10, 20 in the terminal in white text\non a red background:\n\n```coffeescript\n  TermUI.pos(10,20).fg(TermUI.C.w).bg(TermUI.C.w).out(\"Hello, world!\")\n```\n\nAs you can see, pretty much everything is chainable.\n\n### Handy Rendering Shortcuts\nThe `C` object contains definitions for common colors so that you don't have\nto remember the numeric values.\n\n  - k: black\n  - r: red\n  - g: green\n  - y: yellow\n  - b: blue\n  - m: magenta\n  - c: cyan\n  - w: white\n  - x: the terminal's default color\n\nThe `S` object is similar: it contains the text style definitions -- normal,\nbold, underline, blink, and inverse.\n\nThe `SYM` object contains shortcuts for some handy UTF8 characters: star, check\nx, triUp, triDown, triLeft, triRight, fn, arrowUp, arrowDown, arrowLeft, and\narrowRight.\n\n### Events\n`resize` is fired when the user resizes their terminal. The listener receives\nan object with 'w' and 'h' properties set to the new width and height of the\nterminal.\n\n`keypress` is fired when a key is pressed. This works just like the `keypress`\nevent on `process.stdin`\n\n`mousedown, mouseup, drag, wheel` are all the mouse events that are fired. The\nreceiver is sent an object that contains which button was pressed, which direction\nthe wheel scrolled, the x/y location, and whether or not shift was pressed.\n\n\n## Widgets\n\n### Button\n\nButtons are simply clickable rectangular areas that can have a label on them.\nHere's how to use one...\n\n```coffeescript\n\tTermUI = require 'TermUI'\n\n\tTermUI.enableMouse()\n\n\tbutton = new TermUI.Button\n\t\tbounds:\n\t\t\tx: 0\n\t\t\ty: 0\n\t\t\tw: 30\n\t\t\th: 3\n\t\t\tlabel: 'I am a banana!'\n\t\t\tlabelAnchor: 5\n\n\tbutton.on 'mousedown', ->\n\t\tbutton.bg = TermUI.C.y\n\t\tbutton.draw()\n\n\tbutton.on 'mouseup', ->\n\t\tbutton.bg = TermUI.C.b\n\t\tbutton.draw()\n\n\tbutton.draw()\n```\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/jocafa/node-term-ui/issues"
  },
  "_id": "node-term-ui@0.0.5",
  "_shasum": "3a1a250ed7be8b62170132207bc753ddbaf1ea6b",
  "_from": "node-term-ui@*",
  "_resolved": "https://registry.npmjs.org/node-term-ui/-/node-term-ui-0.0.5.tgz"
}
